{
	"$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"namespaceName": {
			"type": "string",
			"metadata": {
				"description": "Required. The name of the EventHub namespace"
			}
		},
		"location": {
			"type": "string",
			"defaultValue": "[resourceGroup().location]",
			"metadata": {
				"description": "Optional. Location for all resources."
			}
		},
		"skuName": {
			"type": "string",
			"defaultValue": "Standard",
			"allowedValues":[
				"Basic",
				"Standard"
			],
			"metadata": {
				"description": "Optional. EventHub Plan sku name"
			}
		},
		"skuCapacity": {
			"type": "int",
			"defaultValue": 1,
			"minValue": 1,
			"maxValue": 20,
			"metadata": {
				"description": "Optional. Event Hub Plan scale-out capacity of the resource"
			}
		},
		"zoneRedundant": {
			"type": "bool",
			"defaultValue": false,
			"metadata": {
				"description": "Optional. Switch to make the Event Hub Namespace zone redundant."
			}
		},
		"isAutoInflateEnabled": {
			"type": "bool",
			"defaultValue": false,
			"metadata": {
				"description": "Optional. Switch to enable the Auto Inflate feature of Event Hub."
			}
		},
		"maximumThroughputUnits": {
			"type": "int",
			"defaultValue": 1,
			"minValue": 0,
			"maxValue": 20,
			"metadata": {
				"description": "Optional. Upper limit of throughput units when AutoInflate is enabled, value should be within 0 to 20 throughput units."
			}
		},
		"partnerNamespaceId": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optional. ARM Id of the Primary/Secondary eventhub namespace name, which is part of GEO DR pairing"
			}
		},
		"namespaceAlias": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optional. The Disaster Recovery configuration name"
			}
		},
		"authorizationRules": {
			"type": "array",
			"defaultValue": [
				{
					"name": "RootManageSharedAccessKey",
					"properties": {
						"rights": [
							"Listen",
							"Manage",
							"Send"
						]
					}
				}
			],
			"metadata": {
				"description": "Optional. Authorization Rules for the Event Hub namespace"
			}
		},
		"networkAcls": {
			"type": "object",
			"defaultValue": {
			},
			"metadata": {
				"description": "Optional. Service endpoint object information"
			}
		},
		"vNetId": {
			"type": "string",
			"defaultValue": "",
			"metadata": {
				"description": "Optional. Virtual Network Id to lock down the Event Hub."
			}
		},
		"diagnosticLogsRetentionInDays": {
			"type": "int",
			"defaultValue": 365,
			"minValue": 0,
			"maxValue": 365,
			"metadata": {
				"description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
			}
		},
		"diagnosticStorageAccountId": {
			"type": "string",
			"metadata": {
				"description": "Optional. Resource identifier of the Diagnostic Storage Account."
			}
		},
		"workspaceId": {
			"type": "string",
			"metadata": {
				"description": "Optional. Resource identifier of Log Analytics."
			}
		},
		"lockForDeletion": {
			"type": "bool",
			"defaultValue": true,
			"metadata": {
				"description": "Optional. Switch to lock Key Vault from deletion."
			}
		},
		"tags": {
			"type": "object",
			"defaultValue": {
			},
			"metadata": {
				"description": "Optional. Tags of the Key Vault resource."
			}
		}
	},
	"variables": {
		"namespaceResourceId": "[resourceId('Microsoft.EventHub/Namespaces', parameters('namespaceName'))]",
		"defaultAuthorizationRuleId": "[resourceId('Microsoft.EventHub/namespaces/AuthorizationRules', parameters('namespaceName'), 'RootManageSharedAccessKey')]",
		"defaultSASKeyName": "RootManageSharedAccessKey",
		"authRuleResourceId": "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', parameters('namespaceName'), variables('defaultSASKeyName'))]",
		"maximumThroughputUnits": "[if(not(parameters('isAutoInflateEnabled')), 0, parameters('maximumThroughputUnits'))]",
		"deployServiceEndpoint": "[not(empty(parameters('networkAcls')))]",
		"virtualNetworkRules": {
			"copy": [
				{
					"name": "virtualNetworkRules",
					"count": "[if(not(variables('deployServiceEndpoint')), 0, length(parameters('networkAcls').virtualNetworkRules))]",
					"input": {
						"id": "[concat(parameters('vNetId'), '/subnets/', parameters('networkAcls').virtualNetworkRules[copyIndex('virtualNetworkRules')].subnet)]"
					}
				}
			]
		},
		"emptyArray": [
		],
		"networkAcls": {
			"bypass": "[if(not(variables('deployServiceEndpoint')), json('null'), parameters('networkAcls').bypass)]",
			"defaultAction": "[if(not(variables('deployServiceEndpoint')), json('null'), parameters('networkAcls').defaultAction)]",
			"virtualNetworkRules": "[if(not(variables('deployServiceEndpoint')), json('null'), if(equals(length(parameters('networkAcls').virtualNetworkRules), 0), variables('emptyArray'), variables('virtualNetworkRules').virtualNetworkRules))]",
			"ipRules": "[if(not(variables('deployServiceEndpoint')), json('null'), if(equals(length(parameters('networkAcls').ipRules), 0), variables('emptyArray'), parameters('networkAcls').ipRules))]"
		},
		"namespaceAlias": "[if(empty(parameters('namespaceAlias')), 'placeholder', parameters('namespaceAlias'))]",
		"diagnosticsMetrics": [
			{
				"category": "AllMetrics",
				"timeGrain": null,
				"enabled": true,
				"retentionPolicy": {
					"enabled": true,
					"days": "[parameters('diagnosticLogsRetentionInDays')]"
				}
			}
		],
		"diagnosticsLogs": [
			{
				"category": "ArchiveLogs",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "OperationalLogs",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "AutoScaleLogs",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "KafkaCoordinatorLogs",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "KafkaUserErrorLogs",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "EventHubVNetConnectionEvent",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			},
			{
				"category": "CustomerManagedKeyUserLogs",
				"enabled": true,
				"retentionPolicy": {
					"days": "[parameters('diagnosticLogsRetentionInDays')]",
					"enabled": true
				}
			}
		]
	},
	"resources": [
		{
			"type": "Microsoft.EventHub/namespaces",
			"apiVersion": "2017-04-01",
			"name": "[parameters('namespaceName')]",
			"location": "[parameters('location')]",
			"tags": "[parameters('tags')]",
			"sku": {
				"name": "[parameters('skuName')]",
				"tier": "[parameters('skuName')]",
				"capacity": "[parameters('skuCapacity')]"
			},
			"properties": {
				"zoneRedundant": "[parameters('zoneRedundant')]",
				"isAutoInflateEnabled": "[parameters('isAutoInflateEnabled')]",
				"maximumThroughputUnits": "[variables('maximumThroughputUnits')]",
				"networkAcls": "[if(not(variables('deployServiceEndpoint')), json('null'), variables('networkAcls'))]"
			},
			"resources": [
				{
					"type": "providers/locks",
					"apiVersion": "2016-09-01",
					"condition": "[parameters('lockForDeletion')]",
					"name": "Microsoft.Authorization/evenHubNamespaceDoNotDelete",
					"dependsOn": [
						"[concat('Microsoft.EventHub/namespaces/', parameters('namespaceName'))]"
					],
					"comments": "Resource lock on Event Hub Namespace",
					"properties": {
						"level": "CannotDelete"
					}
				},
				{
					"type": "Microsoft.EventHub/namespaces/providers/diagnosticsettings",
					"apiVersion": "2016-09-01",
					"name": "[concat(parameters('namespaceName'), '/Microsoft.Insights/service')]",
					"location": "[parameters('location')]",
					"dependsOn": [
						"[concat('Microsoft.EventHub/namespaces/', parameters('namespaceName'))]"
					],
					"properties": {
						"storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
						"workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
						"metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId'))), json('null'), variables('diagnosticsMetrics'))]",
						"logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId'))), json('null'), variables('diagnosticsLogs'))]"
					}
				}
			]
		},
		{
			"type": "Microsoft.EventHub/namespaces/disasterRecoveryConfigs",
			"apiVersion": "2017-04-01",
			"name": "[concat(parameters('namespaceName'), '/', variables('namespaceAlias'))]",
			"location": "[parameters('location')]",

			"condition": "[if(and(not(empty(parameters('partnerNamespaceId'))),not(empty(parameters('namespaceAlias')))), bool('true') , bool('false'))]",
			"dependsOn": [
				"[variables('namespaceResourceId')]"
			],
			"properties": {
				"partnerNamespace": "[parameters('partnerNamespaceId')]"
			}
		},
		{
			"type": "Microsoft.EventHub/namespaces/AuthorizationRules",
			"apiVersion": "2017-04-01",
			"name": "[concat(parameters('namespaceName'),'/', parameters('authorizationRules')[copyIndex()].name)]",
			"condition": "[greater(length(parameters('authorizationRules')),0)]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[variables('namespaceResourceId')]"
			],
			"copy": {
				"name": "authorizationRules",
				"count": "[length(parameters('authorizationRules'))]"
			},
			"properties": {
				"rights": "[parameters('authorizationRules')[copyIndex()].properties.rights]"
			}
		}
	],
	"outputs": {
		"namespaceName": {
			"type": "string",
			"value": "[parameters('namespaceName')]",
			"metadata": {
				"description": "The Name of the EventHub Namespace"
			}
		},
		"namespaceResourceId": {
			"type": "string",
			"value": "[variables('namespaceResourceId')]",
			"metadata": {
				"description": "The Resource Id of the EventHub Namespace"
			}
		},
		"namespaceResourceGroup": {
			"type": "string",
			"value": "[resourceGroup().name]",
			"metadata": {
				"description": "The name of the Resource Group with the EventHub Namespace"
			}
		},
		"defaultAuthorizationRuleId": {
			"type": "string",
			"value": "[variables('defaultAuthorizationRuleId')]",
			"metadata": {
				"description": "The Id of the authorization rule marked by the variable with the same name."
			}
		},
		"namespaceConnectionString": {
			"type": "securestring",
			"value": "[listkeys(variables('authRuleResourceId'), '2017-04-01').primaryConnectionString]",
			"metadata": {
				"description": "The connection string of the EventHub Namespace"
			}
		},
		"sharedAccessPolicyPrimaryKey": {
			"type": "securestring",
			"value": "[listkeys(variables('authRuleResourceId'), '2017-04-01').primaryKey]",
			"metadata": {
				"description": "The shared access policy primary key for the EventHub Namespace"
			}
		}
	}
}
