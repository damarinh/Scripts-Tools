{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vmNames": {
            "type": "array",
            "minLength": 1,
            "metadata": {
                "description": "Required. Name(s) of the virtual machine(s)"
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Optional. Location for all resources."
            }
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_D2s_v3",
            "metadata": {
                "description": "Optional. Specifies the size for the VM"
            }
        },
        "standardImage": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "OS image used for the VM"
            }
        },
        "osDisk": {
            "type": "object",
            "metadata": {
                "description": "Required. Specifies the OS disk."
            }
        },
        "dataDisks": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. Specifies the data disks."
            }
        },
        "ultraSSDEnabled": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
            }
        },
        "adminUsername": {
            "type": "securestring",
            "metadata": {
                "description": "Required. Administrator username"
            }
        },
        "adminPassword": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed"
            }
        },
        "customData": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
            }
        },
        "windowsConfiguration": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Specifies Windows operating system settings on the virtual machine."
            }
        },
        "linuxConfiguration": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Specifies the Linux operating system settings on the virtual machine."
            }
        },
        "certificatesToBeInstalled": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
            }
        },
        "allowExtensionOperations": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
            }
        },
        "requireGuestProvisionSignal": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies whether the guest provision signal is required from the virtual machine."
            }
        },
        "availabilitySetName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Creates an availability set with the given name and adds the VMs to it. Cannot be used in combination with availability zone nor scale set."
            }
        },
        "availabilitySetFaultDomain": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "Optional. The number of fault domains to use."
            }
        },
        "availabilitySetUpdateDomain": {
            "type": "int",
            "defaultValue": 5,
            "metadata": {
                "description": "Optional. The number of update domains to use."
            }
        },
        "availabilitySetSku": {
            "type": "string",
            "defaultValue": "Aligned",
            "metadata": {
                "description": "Optional. Sku of the availability set. Use 'Aligned' for virtual machines with managed disks and 'Classic' for virtual machines with unmanaged disks."
            }
        },
        "scaleSetName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Creates a virtual machine scale set with the given name and adds the VMs to it. Cannot be used in combination with availability zone nor availability set."
            }
        },
        "scaleSetFaultDomain": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "Optional. Fault Domain count for each placement group."
            }
        },
        "proximityPlacementGroupName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Creates an proximity placement group and adds the VMs to it."
            }
        },
        "proximityPlacementGroupType": {
            "type": "string",
            "allowedValues": [
                "Standard",
                "Ultra"
            ],
            "defaultValue": "Standard",
            "metadata": {
                "description": "Optional. Specifies the type of the proximity placement group."
            }
        },
        "useAvailabilityZone": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Creates an availability zone and adds the VMs to it. Cannot be used in combination with availability set nor scale set."
            }
        },
        "subnetId": {
            "type": "string",
            "metadata": {
                "description": "Required. Full qualified subnet Id"
            }
        },
        "vmIPAddress": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. IP address used as initial IP address. If left empty, the VM will use the next available IP"
            }
        },
        "enablePublicIP": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Enables the creation of a Public IP and assigns it to the Network Interface."
            }
        },
        "enableIPForwarding": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
            }
        },
        "enableAcceleratedNetworking": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. If the network interface is accelerated networking enabled."
            }
        },
        "loadBalancerBackendPoolId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Represents a Load Balancer backend pool resource identifier, if left blank, no Load Balancer will be associated to the VMSS"
            }
        },
        "applicationSecurityGroupId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Application Security Group to associate to the Network Interface. If left empty, the Network Interface would not be associated to any Application Security Group."
            }
        },
        "vmPriority": {
            "type": "string",
            "defaultValue": "Regular",
            "allowedValues": [
                "Regular",
                "Low"
            ],
            "metadata": {
                "description": "Optional. Specifies the priority for the virtual machine."
            }
        },
        "enableEvictionPolicy": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
            }
        },
        "maxPriceForLowPriorityVm": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
            }
        },
        "dedicatedHostId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Specifies resource Id about the dedicated host that the virtual machine resides in."
            }
        },
        "licenseType": {
            "type": "string",
            "defaultValue": "",
            "allowedValues": [
                "Windows_Client",
                "Windows_Server",
                ""
            ],
            "metadata": {
                "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system."
            }
        },
        "enableBootDiagnostics": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Whether boot diagnostics should be enabled on the Virtual Machine."
            }
        },
        "diagnosticLogsRetentionInDays": {
            "type": "int",
            "defaultValue": 365,
            "minValue": 0,
            "maxValue": 365,
            "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
            }
        },
        "diagnosticStorageAccountId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of the Diagnostic Storage Account."
            }
        },
        "diagnosticStorageAccountName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Storage account used to store diagnostic information"
            }
        },
        "workspaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of Log Analytics."
            }
        },
        "eventHubAuthorizationRuleId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
            }
        },
        "lockForDeletion": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Optional. Switch to lock VM from deletion."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Tags of the VM resource."
            }
        }
    },
    "variables": {
        "allZones": {
            "copy": [
                {
                    "name": "zones",
                    "count": "[length(parameters('vmNames'))]",
                    "input": "[string(add(mod(copyIndex('zones'), 3), 1))]"
                }
            ]
        },
        "diagnosticsMetrics": [
            {
                "category": "AllMetrics",
                "timeGrain": null,
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            }
        ],
        "pipDiagnosticsLogs": [
            {
                "category": "DDoSProtectionNotifications",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            },
            {
                "category": "DDoSMitigationFlowLogs",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            },
            {
                "category": "DDoSMitigationReports",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            }
        ]
    },
    "resources": [
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2019-09-01",
            "name": "[concat(parameters('vmNames')[copyIndex()], '-pip-', padLeft(copyIndex(1),2,'0'))]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "condition": "[parameters('enablePublicIP')]",
            "copy": {
                "name": "pipLoop",
                "count": "[length(parameters('vmNames'))]"
            },
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static"
            },
            "zones": "[if(parameters('useAvailabilityZone'), array(variables('allZones').zones[copyIndex()]), json('null'))]"
        },
        {
            "type": "Microsoft.Network/publicIPAddresses/providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "condition": "[and(parameters('enablePublicIP'), or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName')))))]",
            "name": "[concat(parameters('vmNames')[copyIndex()], '-pip-', padLeft(copyIndex(1),2,'0'), '/Microsoft.Insights/service')]",
            "dependsOn": [
                "pipLoop"
            ],
            "copy": {
                "name": "pipDiagnosticLoop",
                "count": "[length(parameters('vmNames'))]"
            },
            "properties": {
                "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), or(empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName')))), json('null'), variables('diagnosticsMetrics'))]",
                "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), or(empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName')))), json('null'), variables('pipDiagnosticsLogs'))]"
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "copy": {
                "name": "nicLoop",
                "count": "[length(parameters('vmNames'))]"
            },
            "dependsOn": [
                "pipLoop"
            ],
            "name": "[concat(parameters('vmNames')[copyIndex()], '-nic-int-', padLeft(copyIndex(1),2,'0'))]",
            "properties": {
                "enableIPForwarding": "[parameters('enableIPForwarding')]",
                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "[if(empty(parameters('vmIPAddress')), 'Dynamic', 'Static')]",
                            "publicIPAddress": "[if(not(parameters('enablePublicIP')), json('null'), json(concat('{\"id\":\"', resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vmNames')[copyIndex()], '-pip-', padLeft(copyIndex(1),2,'0'))),'\"}')))]",
                            "privateIPAddress": "[if(empty(parameters('vmIPAddress')), json('null'), vdc.nextIP(parameters('vmIPAddress'), copyIndex()))]",
                            "subnet": {
                                "id": "[parameters('subnetId')]"
                            },
                            "loadBalancerBackendAddressPools": "[if(empty(parameters('loadBalancerBackendPoolId')), json('null'), parameters('loadBalancerBackendPoolId'))]",
                            "applicationSecurityGroups": "[if(empty(parameters('applicationSecurityGroupId')), json('null'), parameters('applicationSecurityGroupId'))]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces/providers/diagnosticSettings",
            "apiVersion": "2017-05-01-preview",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "name": "[concat(parameters('vmNames')[copyIndex()], '-nic-int-', padLeft(copyIndex(1),2,'0'), '/Microsoft.Insights/service')]",
            "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
            "dependsOn": [
                "nicLoop"
            ],
            "copy": {
                "name": "nicDiagnosticLoop",
                "count": "[length(parameters('vmNames'))]"
            },
            "properties": {
                "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), or(empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName')))), json('null'), variables('diagnosticsMetrics'))]"
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "apiVersion": "2019-07-01",
            "condition": "[not(empty(parameters('availabilitySetName')))]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "name": "[if(not(empty(parameters('availabilitySetName'))),parameters('availabilitySetName'),'dummyAvailabilitySet')]",
            "dependsOn": [
                "[if(not(empty(parameters('proximityPlacementGroupName'))),parameters('proximityPlacementGroupName'),'dummyProximityGroup')]"
            ],
            "properties": {
                "platformFaultDomainCount": "[parameters('availabilitySetFaultDomain')]",
                "platformUpdateDomainCount": "[parameters('availabilitySetUpdateDomain')]",
                "proximityPlacementGroup": "[if(empty(parameters('proximityPlacementGroupName')), json('null'), json(concat('{\"id\":\"', resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('proximityPlacementGroupName')),'\"}')))]"
            },
            "sku": {
                "name": "[parameters('availabilitySetSku')]"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "apiVersion": "2019-07-01",
            "condition": "[not(empty(parameters('scaleSetName')))]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "name": "[if(not(empty(parameters('scaleSetName'))),parameters('scaleSetName'),'dummyScaleSet')]",
            "dependsOn": [
                "[if(not(empty(parameters('proximityPlacementGroupName'))),parameters('proximityPlacementGroupName'),'dummyProximityGroup')]"
            ],
            "properties": {
                "platformFaultDomainCount": "[parameters('scaleSetFaultDomain')]",
                "singlePlacementGroup": true,
                "proximityPlacementGroup": "[if(empty(parameters('proximityPlacementGroupName')), json('null'), json(concat('{\"id\":\"', resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('proximityPlacementGroupName')),'\"}')))]"
            }
        },
        {
            "type": "Microsoft.Compute/proximityPlacementGroups",
            "apiVersion": "2019-07-01",
            "condition": "[not(empty(parameters('proximityPlacementGroupName')))]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "name": "[if(not(empty(parameters('proximityPlacementGroupName'))),parameters('proximityPlacementGroupName'),'dummyProximityGroup')]",
            "properties": {
                "proximityPlacementGroupType": "[parameters('proximityPlacementGroupType')]"
            }
        },
        {
            "name": "[parameters('vmNames')[copyIndex()]]",
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-07-01",
            "location": "[parameters('location')]",
            "copy": {
                "name": "vmLoop",
                "count": "[length(parameters('vmNames'))]"
            },
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "nicLoop",
                "[if(not(empty(parameters('availabilitySetName'))),parameters('availabilitySetName'),'dummyAvailabilitySet')]",
                "[if(not(empty(parameters('scaleSetName'))),parameters('scaleSetName'),'dummyScaleSet')]",
                "[if(not(empty(parameters('proximityPlacementGroupName'))),parameters('proximityPlacementGroupName'),'dummyProximityGroup')]"
            ],
            "zones": "[if(parameters('useAvailabilityZone'), array(variables('allZones').zones[copyIndex()]), json('null'))]",
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                    "imageReference": "[parameters('standardImage')]",
                    "osDisk": {
                        "name": "[concat(parameters('vmNames')[copyIndex()], '-disk-os-01')]",
                        "createOption": "[parameters('osDisk').createOption]",
                        "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
                        "managedDisk": {
                            "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]"
                        }
                    },
                    "copy": [
                        {
                            "name": "dataDisks",
                            "count": "[length(parameters('dataDisks'))]",
                            "input": {
                                "lun": "[copyIndex('dataDisks')]",
                                "name": "[concat(parameters('vmNames')[copyIndex('vmLoop')], '-disk-data-', padLeft(copyIndex('dataDisks',1),2,'0'))]",
                                "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                                "createOption": "[parameters('dataDisks')[copyIndex('dataDisks')].createOption]",
                                "caching": "[parameters('dataDisks')[copyIndex('dataDisks')].caching]",
                                "managedDisk": {
                                    "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.storageAccountType]"
                                }
                            }
                        }
                    ]
                },
                "additionalCapabilities": {
                    "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
                },
                "osProfile": {
                    "computerName": "[parameters('vmNames')[copyIndex()]]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "customData": "[if(empty(parameters('customData')), json('null'), base64(parameters('customData')))]",
                    "windowsConfiguration": "[if(empty(parameters('windowsConfiguration')), json('null'),parameters('windowsConfiguration'))]",
                    "linuxConfiguration": "[if(empty(parameters('linuxConfiguration')), json('null'),parameters('linuxConfiguration'))]",
                    "secrets": "[parameters('certificatesToBeInstalled')]",
                    "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                    //"requireGuestProvisionSignal": "[parameters('requireGuestProvisionSignal')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmNames')[copyIndex()], '-nic-int-', padLeft(copyIndex(1),2,'0')))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "[parameters('enableBootDiagnostics')]",
                        "storageUri": "[concat('https://', if(empty(parameters('diagnosticStorageAccountName')), 'dummy', parameters('diagnosticStorageAccountName')), '.blob.core.windows.net/')]"
                    }
                },
                "availabilitySet": "[if(not(empty(parameters('availabilitySetName'))), json(concat('{\"id\":\"', resourceId('Microsoft.Compute/availabilitySets', parameters('availabilitySetName')),'\"}')), json('null'))]",
                "virtualMachineScaleSet": "[if(not(empty(parameters('scaleSetName'))), json(concat('{\"id\":\"',resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('scaleSetName')),'\"}')), json('null'))]",
                "proximityPlacementGroup": "[if(empty(parameters('proximityPlacementGroupName')), json('null'), json(concat('{\"id\":\"', resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('proximityPlacementGroupName')),'\"}')))]",
                "priority": "[parameters('vmPriority')]",
                "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', json('null'))]",
                "billingProfile": "[if(and(not(empty(parameters('vmPriority'))),not(empty(parameters('maxPriceForLowPriorityVm')))), json(concat('{\"maxPrice\":\"',parameters('maxPriceForLowPriorityVm'),'\"}')), json('null'))]",
                "host": "[if(not(empty(parameters('dedicatedHostId'))), json(concat('{\"id\":\"',parameters('dedicatedHostId'),'\"}')), json('null'))]",
                "licenseType": "[if(empty(parameters('licenseType')), json('null'),parameters('licenseType'))]"
            },
            "resources": [
                {
                    "type": "providers/locks",
                    "apiVersion": "2016-09-01",
                    "condition": "[parameters('lockForDeletion')]",
                    "name": "Microsoft.Authorization/vmDoNotDelete",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmNames')[copyIndex()])]"
                    ],
                    "comments": "Resource lock on Azure Key Vault",
                    "properties": {
                        "level": "CannotDelete"
                    }
                },
                {
                    "type": "providers/diagnosticSettings",
                    "apiVersion": "2016-09-01",
                    "name": "Microsoft.Insights/service",
                    "location": "[parameters('location')]",
                    "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
                    "dependsOn": [
                        "[concat('Microsoft.Compute/virtualMachines/', parameters('vmNames')[copyIndex()])]"
                    ],
                    "properties": {
                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), or(empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName')))), json('null'), variables('diagnosticsMetrics'))]",
                        "logs": [
                        ]
                    }
                }
            ]
        }
    ],
    "functions": [
        {
            "namespace": "vdc",
            "members": {
                "nextIP": {
                    "parameters": [
                        {
                            "name": "ip",
                            "type": "string"
                        },
                        {
                            "name": "operand",
                            "type": "int"
                        }
                    ],
                    "output": {
                        "type": "string",
                        "value": "[concat(split(parameters('ip'), '.')[0], '.' ,split(parameters('ip'), '.')[1], '.' ,split(parameters('ip'), '.')[2], '.', add(int(split(parameters('ip'), '.')[3]), parameters('operand')))]"
                    }
                }
            }
        }
    ],
    "outputs": {
    }
}