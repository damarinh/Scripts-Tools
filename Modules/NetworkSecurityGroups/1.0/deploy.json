{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "networkSecurityGroupName": {
            "type": "string",
            "metadata": {
                "description": "Required. Name of the Network Security Group."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Optional. Location for all resources."
            }
        },
        "networkSecurityGroupSecurityRules": {
            "type": "array",
            "metadata": {
                "description": "Required. Array of Security Rules to deploy to the Network Security Group."
            }
        },
        "diagnosticStorageAccountId": {
            "type": "string",
            "metadata": {
                "description": "Optional. Resource identifier of the Diagnostic Storage Account."
            }
        },
        "diagnosticLogsRetentionInDays": {
            "type": "int",
            "defaultValue": 365,
            "minValue": 0,
            "maxValue": 365,
            "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
            }
        },
        "workspaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of Log Analytics."
            }
        },
        "eventHubAuthorizationRuleId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
            }
        },
        "lockForDeletion": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Optional. Switch to lock NSG from deletion."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Tags of the NSG resource."
            }
        }
    },
    "variables": {
        "emptyArray": [
        ],
        "diagnosticsMetrics": [
        ],
        "diagnosticsLogs": [
            {
                "category": "NetworkSecurityGroupEvent",
                "enabled": true,
                "retentionPolicy": {
                    "days": "[parameters('diagnosticLogsRetentionInDays')]",
                    "enabled": true
                }
            },
            {
                "category": "NetworkSecurityGroupRuleCounter",
                "enabled": true,
                "retentionPolicy": {
                    "days": "[parameters('diagnosticLogsRetentionInDays')]",
                    "enabled": true
                }
            }
        ]
    },
    "resources": [
        {
            "apiVersion": "2017-09-01",
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[parameters('networkSecurityGroupName')]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
            ],
            "properties": {
                "copy": [
                    {
                        "name": "securityRules",
                        "count": "[length(parameters('networkSecurityGroupSecurityRules'))]",
                        "input": {
                            "name": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].name]",
                            "properties": {
                                "description": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.description]",
                                "access": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.access]",
                                "destinationAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix)]",
                                "destinationAddressPrefixes": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes)]",
                                "destinationApplicationSecurityGroups": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroups), 0), json('null'), concat(variables('emptyArray'), array(json(concat('{\"id\": \"', resourceId('Microsoft.Network/applicationSecurityGroups', parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroups[0].name), '\"', ',', '\"location\": \"', parameters('location'), '\"}')))))]",
                                "destinationPortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRanges)]",
                                "destinationPortRange": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.destinationPortRange)]",
                                "direction": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.direction]",
                                "priority": "[int(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.priority)]",
                                "protocol": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.protocol]",
                                "sourceAddressPrefix": "[if(equals(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, ''), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix)]",
                                "sourceApplicationSecurityGroups": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroups), 0), json('null'), concat(variables('emptyArray'), array(json(concat('{\"id\": \"', resourceId('Microsoft.Network/applicationSecurityGroups', parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroups[0].name), '\"', ',', '\"location\": \"', parameters('location'), '\"}')))))]",
                                "sourcePortRanges": "[if(equals(length(parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges), 0), json('null'), parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRanges)]",
                                "sourcePortRange": "[parameters('networkSecurityGroupSecurityRules')[copyIndex('securityRules')].properties.sourcePortRange]"
                            }
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "providers/locks",
                    "apiVersion": "2016-09-01",
                    "condition": "[parameters('lockForDeletion')]",
                    "name": "Microsoft.Authorization/networkSecurityGroupDoNotDelete",
                    "dependsOn": [
                        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]"
                    ],
                    "comments": "Resource lock on Network Security Group",
                    "properties": {
                        "level": "CannotDelete"
                    }
                },
                {
                    "type": "Microsoft.Network/networkSecurityGroups/providers/diagnosticsettings",
                    "apiVersion": "2016-09-01",
                    "name": "[concat(parameters('networkSecurityGroupName'), '/Microsoft.Insights/service')]",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[concat('Microsoft.Network/networkSecurityGroups/', parameters('networkSecurityGroupName'))]"
                    ],
                    "properties": {
                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId'))), json('null'), variables('diagnosticsMetrics'))]",
                        "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId'))), json('null'), variables('diagnosticsLogs'))]"
                    }
                }
            ]
        }
    ],
    "outputs": {
        "networkSecurityGroupResourceGroup": {
            "type": "string",
            "value": "[resourceGroup().name]",
            "metadata": {
                "description": "The name of the Resource Group the Network Security Groups were created in."
            }
        },
        "networkSecurityGroupResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('networkSecurityGroupName'))]",
            "metadata": {
                "description": "The Resource Ids of the Network Security Group deployed."
            }
        },
        "networkSecurityGroupName": {
            "type": "string",
            "value": "[parameters('networkSecurityGroupName')]",
            "metadata": {
                "description": "The Name of the Network Security Group deployed."
            }
        }
    }
}